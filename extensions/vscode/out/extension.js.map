{
  "version": 3,
  "sources": ["../src/utils/base.ts", "../src/utils/vscode.ts", "../src/CodeAidGUIWebviewViewProvider.ts", "../src/extension/VsCodeExtension.ts", "../src/activation/activate.ts", "../src/extension.ts"],
  "sourcesContent": ["export function getNonce() {\n  let text = \"\";\n  const possible =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  for (let i = 0; i < 32; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n", "import vscode from \"vscode\";\n\nexport function getExtensionUri(): vscode.Uri {\n  return vscode.extensions.getExtension(\"Continue.continue\")!.extensionUri;\n}\n", "import vscode from \"vscode\";\nimport { getNonce } from \"./utils/base\";\nimport { getExtensionUri } from \"./utils/vscode\";\n\nexport class CodeAidGUIWebviewViewProvider\n  implements vscode.WebviewViewProvider\n{\n  constructor(private readonly extensionContext: vscode.ExtensionContext) {}\n\n  resolveWebviewView(\n    webviewView: vscode.WebviewView,\n    context: vscode.WebviewViewResolveContext,\n    token: vscode.CancellationToken,\n  ): Thenable<void> | void {\n    webviewView.webview.html = this.getSidebarContent(\n      this.extensionContext,\n      webviewView,\n    );\n  }\n\n  getSidebarContent(\n    context: vscode.ExtensionContext | undefined,\n    panel: vscode.WebviewView,\n  ) {\n    const extensionUri = getExtensionUri();\n    const nonce = getNonce();\n\n    const isInDevelopmentMode =\n      context?.extensionMode === vscode.ExtensionMode.Development;\n\n    let scriptUri: string;\n    let styleMainUri: string;\n    if (isInDevelopmentMode) {\n      scriptUri = \"http://localhost:5173/src/main.tsx\";\n      styleMainUri = \"http://localhost:5173/src/index.css\";\n    } else {\n      scriptUri = panel.webview\n        .asWebviewUri(vscode.Uri.joinPath(extensionUri, \"gui/assets/index.js\"))\n        .toString();\n      styleMainUri = panel.webview\n        .asWebviewUri(vscode.Uri.joinPath(extensionUri, \"gui/assets/index.css\"))\n        .toString();\n    }\n\n    return `\n    <!DOCTYPE html>\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>CodeAid</title>\n\n        ${\n          isInDevelopmentMode\n            ? `  <script type=\"module\">\n          import RefreshRuntime from \"/@react-refresh\"\n          RefreshRuntime.injectIntoGlobalHook(window)\n          window.$RefreshReg$ = () => {}\n          window.$RefreshSig$ = () => (type) => type\n          window.__vite_plugin_react_preamble_installed__ = true\n        </script>`\n            : \"\"\n        }\n\n        <script type=\"module\" src=\"/@vite/client\"></script>\n      </head>\n\n      <body>\n        <div id=\"root\"></div>\n            <script type=\"module\" nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n      </body>\n    </html>\n    `;\n  }\n}\n", "import vscode from \"vscode\";\nimport { CodeAidGUIWebviewViewProvider } from \"../CodeAidGUIWebviewViewProvider\";\n\nexport class VscodeExtension {\n  private sidebar;\n\n  constructor(context: vscode.ExtensionContext) {\n    this.sidebar = new CodeAidGUIWebviewViewProvider(context);\n\n    // Sidebar\n    context.subscriptions.push(\n      vscode.window.registerWebviewViewProvider(\n        \"codeAid.codeAidGUIView\",\n        this.sidebar,\n        {\n          webviewOptions: {\n            // \u5F53\u8FD9\u4E2A\u9009\u9879\u8BBE\u7F6E\u4E3A true \u65F6\uFF0C\u5373\u4F7F Webview \u88AB\u9690\u85CF\uFF0C\u5176\u5185\u5BB9\u548C\u72B6\u6001\u4ECD\u7136\u4F1A\u88AB\u4FDD\u7559\u3002\n            // \u8FD9\u610F\u5473\u7740\u5F53\u7528\u6237\u518D\u6B21\u663E\u793A\u8BE5 Webview \u65F6\uFF0C\u5B83\u4E0D\u9700\u8981\u5B8C\u5168\u91CD\u65B0\u52A0\u8F7D\u5185\u5BB9\uFF0C\u53EF\u4EE5\u76F4\u63A5\u6062\u590D\u5230\u4E4B\u524D\u7684\u72B6\u6001\uFF0C\u8FD9\u6837\u53EF\u4EE5\u63D0\u9AD8\u6027\u80FD\u548C\u7528\u6237\u4F53\u9A8C\u3002\n            retainContextWhenHidden: true,\n          },\n        },\n      ),\n    );\n  }\n}\n", "import vscode from \"vscode\";\nimport { VscodeExtension } from \"../extension/VsCodeExtension\";\n\nexport async function activateExtension(context: vscode.ExtensionContext) {\n  const vscodeExtension = new VscodeExtension(context);\n}\n", "import * as vscode from \"vscode\";\n\nasync function dynamicImportAndActivate(context: vscode.ExtensionContext) {\n  const { activateExtension } = await import(\"./activation/activate\");\n\n  try {\n    return activateExtension(context);\n  } catch (error) {\n    console.log(\"\uD83D\uDE80 ~ dynamicImportAndActivate ~ error:\", error);\n  }\n}\n\nexport function activate(context: vscode.ExtensionContext) {\n  return dynamicImportAndActivate(context);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,SAAS,WAAW;AACzB,MAAI,OAAO;AACX,QAAM,WACJ;AACF,WAAS,IAAI,GAAG,IAAI,IAAI,KAAK;AAC3B,YAAQ,SAAS,OAAO,KAAK,MAAM,KAAK,OAAO,IAAI,SAAS,MAAM,CAAC;AAAA,EACrE;AACA,SAAO;AACT;AARA;AAAA;AAAA;AAAA;AAAA;;;ACEO,SAAS,kBAA8B;AAC5C,SAAO,cAAAA,QAAO,WAAW,aAAa,mBAAmB,EAAG;AAC9D;AAJA;AAAA;AAAA;AAAA;AAAA,oBAAmB;AAAA;AAAA;;;ACAnB,IAAAC,gBAIa;AAJb;AAAA;AAAA;AAAA,IAAAA,iBAAmB;AACnB;AACA;AAEO,IAAM,gCAAN,MAEP;AAAA,MACE,YAA6B,kBAA2C;AAA3C;AAAA,MAA4C;AAAA,MAEzE,mBACE,aACA,SACA,OACuB;AACvB,oBAAY,QAAQ,OAAO,KAAK;AAAA,UAC9B,KAAK;AAAA,UACL;AAAA,QACF;AAAA,MACF;AAAA,MAEA,kBACE,SACA,OACA;AACA,cAAM,eAAe,gBAAgB;AACrC,cAAM,QAAQ,SAAS;AAEvB,cAAM,sBACJ,SAAS,kBAAkB,eAAAC,QAAO,cAAc;AAElD,YAAI;AACJ,YAAI;AACJ,YAAI,qBAAqB;AACvB,sBAAY;AACZ,yBAAe;AAAA,QACjB,OAAO;AACL,sBAAY,MAAM,QACf,aAAa,eAAAA,QAAO,IAAI,SAAS,cAAc,qBAAqB,CAAC,EACrE,SAAS;AACZ,yBAAe,MAAM,QAClB,aAAa,eAAAA,QAAO,IAAI,SAAS,cAAc,sBAAsB,CAAC,EACtE,SAAS;AAAA,QACd;AAEA,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAQD,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAOA,EACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAOmC,KAAK,UAAU,SAAS;AAAA;AAAA;AAAA;AAAA,MAIjE;AAAA,IACF;AAAA;AAAA;;;ACzEA,IAAAC,gBAGa;AAHb;AAAA;AAAA;AAAA,IAAAA,iBAAmB;AACnB;AAEO,IAAM,kBAAN,MAAsB;AAAA,MACnB;AAAA,MAER,YAAY,SAAkC;AAC5C,aAAK,UAAU,IAAI,8BAA8B,OAAO;AAGxD,gBAAQ,cAAc;AAAA,UACpB,eAAAC,QAAO,OAAO;AAAA,YACZ;AAAA,YACA,KAAK;AAAA,YACL;AAAA,cACE,gBAAgB;AAAA;AAAA;AAAA,gBAGd,yBAAyB;AAAA,cAC3B;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA;AAAA;;;ACxBA;AAAA;AAAA;AAAA;AAGA,eAAsB,kBAAkB,SAAkC;AACxE,QAAM,kBAAkB,IAAI,gBAAgB,OAAO;AACrD;AALA;AAAA;AAAA;AACA;AAAA;AAAA;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,eAAe,yBAAyB,SAAkC;AACxE,QAAM,EAAE,mBAAAC,mBAAkB,IAAI,MAAM;AAEpC,MAAI;AACF,WAAOA,mBAAkB,OAAO;AAAA,EAClC,SAAS,OAAO;AACd,YAAQ,IAAI,iDAA0C,KAAK;AAAA,EAC7D;AACF;AAEO,SAAS,SAAS,SAAkC;AACzD,SAAO,yBAAyB,OAAO;AACzC;AAGO,SAAS,aAAa;AAAC;",
  "names": ["vscode", "import_vscode", "vscode", "import_vscode", "vscode", "activateExtension"]
}
