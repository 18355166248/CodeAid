{
  "version": 3,
  "sources": ["../src/utils/base.ts", "../src/utils/vscode.ts", "../src/CodeAidGUIWebviewViewProvider.ts", "../src/extension/VsCodeExtension.ts", "../src/activation/activate.ts", "../src/extension.ts"],
  "sourcesContent": ["export function getNonce() {\r\n  let text = \"\";\r\n  const possible =\r\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n  for (let i = 0; i < 32; i++) {\r\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n  }\r\n  return text;\r\n}\r\n", "import vscode from \"vscode\";\r\n\r\nexport function getExtensionUri(): vscode.Uri {\r\n  return vscode.extensions.getExtension(\"Swell.vscode\")!.extensionUri;\r\n}\r\n", "import vscode from \"vscode\";\r\nimport { getNonce } from \"./utils/base\";\r\nimport { getExtensionUri } from \"./utils/vscode\";\r\n\r\nexport class CodeAidGUIWebviewViewProvider\r\n  implements vscode.WebviewViewProvider\r\n{\r\n  constructor(private readonly extensionContext: vscode.ExtensionContext) {}\r\n\r\n  resolveWebviewView(\r\n    webviewView: vscode.WebviewView,\r\n    context: vscode.WebviewViewResolveContext,\r\n    token: vscode.CancellationToken,\r\n  ): Thenable<void> | void {\r\n    webviewView.webview.html = this.getSidebarContent(\r\n      this.extensionContext,\r\n      webviewView,\r\n    );\r\n  }\r\n\r\n  getSidebarContent(\r\n    context: vscode.ExtensionContext | undefined,\r\n    panel: vscode.WebviewView,\r\n  ) {\r\n    const extensionUri = getExtensionUri();\r\n    const nonce = getNonce();\r\n\r\n    const isInDevelopmentMode =\r\n      context?.extensionMode === vscode.ExtensionMode.Development;\r\n\r\n    const localUrl = isInDevelopmentMode ? \"http://localhost:5173\" : \"\";\r\n    // \u672C\u5730\u8054\u52A8\u9700\u8981\u4F7F\u7528\u672C\u5730\u7AEF\u53E3\uFF0C\u5426\u5219\u65E0\u6CD5\u8BBF\u95EE\r\n    const vscMediaUrl = isInDevelopmentMode\r\n      ? \"http://localhost:5173\"\r\n      : panel.webview\r\n          .asWebviewUri(vscode.Uri.joinPath(extensionUri, \"gui\"))\r\n          .toString();\r\n\r\n    let scriptUri: string;\r\n    let styleMainUri: string;\r\n    if (isInDevelopmentMode) {\r\n      scriptUri = `${localUrl}/src/main.tsx`;\r\n      styleMainUri = `${localUrl}/src/index.css`;\r\n    } else {\r\n      scriptUri = panel.webview\r\n        .asWebviewUri(vscode.Uri.joinPath(extensionUri, \"gui/assets/index.js\"))\r\n        .toString();\r\n      styleMainUri = panel.webview\r\n        .asWebviewUri(vscode.Uri.joinPath(extensionUri, \"gui/assets/index.css\"))\r\n        .toString();\r\n    }\r\n\r\n    panel.webview.options = {\r\n      // \u5141\u8BB8\u5728Webview\u4E2D\u8FD0\u884CJavaScript\u4EE3\u7801\u3002\r\n      enableScripts: true,\r\n      // \u8FD9\u4E2A\u9009\u9879\u8BBE\u7F6E\u4E86Webview\u53EF\u4EE5\u8BBF\u95EE\u7684\u672C\u5730\u8D44\u6E90\u6839\u76EE\u5F55\uFF0C\u4ECE\u800C\u9650\u5236Webview\u53EF\u4EE5\u52A0\u8F7D\u7684\u672C\u5730\u6587\u4EF6\r\n      localResourceRoots: [vscode.Uri.joinPath(extensionUri, \"gui\")],\r\n      // \u8FD9\u4E2A\u9009\u9879\u5141\u8BB8\u4F7F\u7528VS Code\u547D\u4EE4URI\uFF0C\u4F8B\u5982vscode://my.extension/someCommand\uFF0C\u4ECE\u800C\u80FD\u591F\u5728Webview\u5185\u5BB9\u4E2D\u8C03\u7528VS Code\u547D\u4EE4\u3002\r\n      enableCommandUris: true,\r\n      // \u8FD9\u4E2A\u9009\u9879\u7528\u4E8E\u5B9A\u4E49Webview\u4E0EVS Code\u6269\u5C55\u5BBF\u4E3B\u4E4B\u95F4\u7684\u7AEF\u53E3\u6620\u5C04\u5173\u7CFB\u3002\r\n      portMapping: [\r\n        {\r\n          webviewPort: 65433,\r\n          extensionHostPort: 65433,\r\n        },\r\n      ],\r\n    };\r\n\r\n    return `\r\n    <!DOCTYPE html>\r\n      <head>\r\n        <meta charset=\"UTF-8\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        <title>CodeAid</title>\r\n        <link rel=\"stylesheet\" href=\"https://at.alicdn.com/t/c/font_4663234_rbzc0ccc1de.css\">\r\n        <link href=\"${styleMainUri}\" rel=\"stylesheet\">\r\n\r\n        ${\r\n          isInDevelopmentMode\r\n            ? `  <script type=\"module\">\r\n          import RefreshRuntime from \"${localUrl}/@react-refresh\"\r\n          RefreshRuntime.injectIntoGlobalHook(window)\r\n          window.$RefreshReg$ = () => {}\r\n          window.$RefreshSig$ = () => (type) => type\r\n          window.__vite_plugin_react_preamble_installed__ = true\r\n        </script>`\r\n            : \"\"\r\n        }\r\n\r\n        ${\r\n          isInDevelopmentMode\r\n            ? `\r\n              <script type=\"module\" src=\"${localUrl}/@vite/client\"></script>\r\n              `\r\n            : \"\"\r\n        }\r\n\r\n\r\n      </head>\r\n\r\n      <body>\r\n        <div id=\"root\"></div>\r\n        <script type=\"module\" nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\r\n        <script>window.vscMediaUrl = \"${vscMediaUrl}\"</script>\r\n      </body>\r\n    </html>\r\n    `;\r\n  }\r\n}\r\n", "import vscode from \"vscode\";\r\nimport { CodeAidGUIWebviewViewProvider } from \"../CodeAidGUIWebviewViewProvider\";\r\n\r\nexport class VscodeExtension {\r\n  private sidebar;\r\n\r\n  constructor(context: vscode.ExtensionContext) {\r\n    this.sidebar = new CodeAidGUIWebviewViewProvider(context);\r\n\r\n    // Sidebar\r\n    context.subscriptions.push(\r\n      vscode.window.registerWebviewViewProvider(\r\n        \"codeAid.codeAidGUIView\",\r\n        this.sidebar,\r\n        {\r\n          webviewOptions: {\r\n            // \u5F53\u8FD9\u4E2A\u9009\u9879\u8BBE\u7F6E\u4E3A true \u65F6\uFF0C\u5373\u4F7F Webview \u88AB\u9690\u85CF\uFF0C\u5176\u5185\u5BB9\u548C\u72B6\u6001\u4ECD\u7136\u4F1A\u88AB\u4FDD\u7559\u3002\r\n            // \u8FD9\u610F\u5473\u7740\u5F53\u7528\u6237\u518D\u6B21\u663E\u793A\u8BE5 Webview \u65F6\uFF0C\u5B83\u4E0D\u9700\u8981\u5B8C\u5168\u91CD\u65B0\u52A0\u8F7D\u5185\u5BB9\uFF0C\u53EF\u4EE5\u76F4\u63A5\u6062\u590D\u5230\u4E4B\u524D\u7684\u72B6\u6001\uFF0C\u8FD9\u6837\u53EF\u4EE5\u63D0\u9AD8\u6027\u80FD\u548C\u7528\u6237\u4F53\u9A8C\u3002\r\n            retainContextWhenHidden: true,\r\n          },\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n", "import vscode from \"vscode\";\r\nimport { VscodeExtension } from \"../extension/VsCodeExtension\";\r\n\r\nexport async function activateExtension(context: vscode.ExtensionContext) {\r\n  const vscodeExtension = new VscodeExtension(context);\r\n}\r\n", "import * as vscode from \"vscode\";\r\n\r\nasync function dynamicImportAndActivate(context: vscode.ExtensionContext) {\r\n  const { activateExtension } = await import(\"./activation/activate\");\r\n\r\n  try {\r\n    return activateExtension(context);\r\n  } catch (error) {\r\n    console.log(\"\uD83D\uDE80 ~ dynamicImportAndActivate ~ error:\", error);\r\n  }\r\n}\r\n\r\nexport function activate(context: vscode.ExtensionContext) {\r\n  return dynamicImportAndActivate(context);\r\n}\r\n\r\n// this method is called when your extension is deactivated\r\nexport function deactivate() {}\r\n"],
  "mappings": "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",
  "names": ["vscode", "import_vscode", "vscode", "import_vscode", "vscode", "activateExtension"]
}
